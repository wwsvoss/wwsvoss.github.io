<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于华为云的图像识别系统</title>
      <link href="2021/02/15/ji-yu-hua-wei-yun-de-tu-xiang-shi-bie-xi-tong/"/>
      <url>2021/02/15/ji-yu-hua-wei-yun-de-tu-xiang-shi-bie-xi-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="基于华为云的图像识别系统"><a href="#基于华为云的图像识别系统" class="headerlink" title="基于华为云的图像识别系统"></a><strong>基于华为云的图像识别系统</strong></h1><h2 id="华为云官网"><a href="#华为云官网" class="headerlink" title="华为云官网"></a><a href="https://www.huaweicloud.com/">华为云官网</a></h2><p> <img src="https://i.loli.net/2021/02/15/bSL1qGYXzNkxjRv.jpg" alt="华为云"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>‘’’</p><p>import cv2<br>import numpy as np<br>from PIL import ImageFont, ImageDraw, Image<br>import sys<br>import json<br>import requests<br>from cv2 import cv2</p><p>token_url = “<a href="https://iam.cn-north-4.myhuaweicloud.com/v3/auth/tokens&quot;">https://iam.cn-north-4.myhuaweicloud.com/v3/auth/tokens"</a><br>ModelArts_url = ‘<a href="https://ebe127c49e07432ea7b7f3a4e4fab1b2.apig.cn-north-4.huaweicloudapis.com/v1/infers/e25263b6-4532-48ab-801f-5c48d1ce4714'">https://ebe127c49e07432ea7b7f3a4e4fab1b2.apig.cn-north-4.huaweicloudapis.com/v1/infers/e25263b6-4532-48ab-801f-5c48d1ce4714'</a></p><p>def getToken():<br>    HWdata = {<br>            “auth”: {<br>                “identity”: {<br>                “methods”: [“password”],<br>                “password”: {<br>                    “user”: {<br>                    “name”: name,<br>                    “password”: password,<br>                    “domain”: {“name”: name}<br>                            }<br>                        }<br>                    },<br>                “scope”: {“project”:{“name”:”cn-north-4”}}<br>            }<br>        }<br>    HWheaders = {“Content-Type”: “application/json”}<br>    response = requests.post(token_url, data=json.dumps(HWdata), headers=HWheaders)<br>    # print(response.status_code)<br>    if response.status_code == 201:<br>        token = response.headers[“X-Subject-Token”]<br>        return token<br>    else:<br>        return ‘’</p><p>def writetxt(txt):<br>    fw = open(“C:/VisionMaster/config/token.txt”,’w’)<br>    fw.write(txt)<br>    fw.close()</p><p>def imgpro(image_source):<br>    dst = cv2.cvtColor(image_source,cv2.COLOR_RGB2GRAY)<br>    ret,dst_2=cv2.threshold(dst,90,230,cv2.THRESH_BINARY)<br>    # cv2.imshow(“frame”, dst_2)<br>    # cv2.waitKey(0)  </p><pre><code>kernel = np.ones((3,3),np.uint8)opening = cv2.morphologyEx(dst_2, cv2.MORPH_OPEN, kernel)# cv2.imshow("frame", opening)# cv2.waitKey(0)  # 找轮廓 opencv-3.4# binary,contours,hierarchy = cv2.findContours(opening,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)# 找轮廓 opencv-4.2contours,binary = cv2.findContours(opening,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)# cv2.imshow("frame", opening)# cv2.waitKey(0)  src_roi = image_sourcefor i in range(0,len(contours)):    rect = cv2.minAreaRect(contours[i])    box = cv2.boxPoints(rect)    box = np.int64(box)    area = cv2.contourArea(contours[i])    # print(area)    if area &lt; 20000:        # 当轮廓面积小于20000时跳过，继续寻找轮廓        continue      rot_img = cv2.getRotationMatrix2D(rect[0], rect[2], 1.0)    cv2.drawContours(image_source, [box], 0, (0, 255, 0), 1)    img_waf = cv2.warpAffine(image_source, rot_img, (image_source.shape[0],image_source.shape[1]))    src_roi = img_waf[int(rect[0][1])-int((rect[1][1])/2)+4:int(rect[0][1])+int((rect[1][1])/2)-4,\                      int(rect[0][0])-int((rect[1][0])/2)+4:int(rect[0][0])+int((rect[1][0])/2)-4]        breakreturn src_roi </code></pre><p>def readtxt(textPath):<br>    with open(textPath,”r”,encoding=’utf-8’) as f:<br>        # 一次性读全部成一个字符串<br>        ftext = f.read()<br>    return ftext</p><p>def onlinepre():<br>    with open(‘C:/VisionMaster/img.jpg’, “rb”) as fp:<br>        byteimg = fp.read()<br>    token = readtxt((“C:/VisionMaster/config/token.txt”))<br>    headers = {“X-Auth-Token”: token}<br>    file = {“images”: byteimg}<br>    res = requests.post(ModelArts_url, files=file, headers=headers)<br>    # print(res.status_code)<br>    resp = res.json()<br>    json_str = json.dumps(resp)<br>    data_dict = json.loads(json_str)<br>    print(data_dict)<br>    text = ‘’<br>    predictedResult = ‘’<br>    if ‘predicted_label’ in data_dict:<br>        text = data_dict[“predicted_label”]<br>        predictedResult = text<br>        print(‘推理结果为:’,predictedResult)<br>    return text</p><p>def showResult(text):<br>    img = cv2.imread(‘C:/VisionMaster/image.jpg’)<br>    newimg = cv2.resize(img,(640,480))<br>    fontpath = “font/simsun.ttc”<br>    font = ImageFont.truetype(fontpath, 48)<br>    img_pil = Image.fromarray(newimg)<br>    draw = ImageDraw.Draw(img_pil)<br>    draw.text((10, 100), text, font = font, fill = (0, 0, 255))<br>    bk_img = np.array(img_pil)<br>    cv2.imshow(‘frame’, bk_img)<br>    key = cv2.waitKey(5000)<br>    cv2.destroyAllWindows()</p><p>if <strong>name</strong> == “<strong>main</strong>“:<br>      while True:<br>        name = str(input(‘请输入华为云账号:’))<br>        password = getpass.getpass(input(‘请输入华为云密码:’))<br>        token = getToken()<br>        if len(token)!=0:<br>            writetxt(token)<br>            print(‘已成功写入Token鉴权，有效期为24小时.\n’)<br>            image_source = cv2.imread(‘C:/VisionMaster/image.jpg’)<br>            cv2.imshow(“frame”, image_source)<br>            cv2.waitKey(3000)<br>            cv2.destroyAllWindows()<br>            img = imgpro(image_source)<br>            cv2.imwrite(‘C:/VisionMaster/img.jpg’,img)<br>            text = onlinepre()<br>            showResult(text)<br>            break<br>        else:<br>            print(‘用户名或密码有误，请重新输入!\n’)</p><p>‘’’</p>]]></content>
      
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/02/10/hello-world/"/>
      <url>2021/02/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
